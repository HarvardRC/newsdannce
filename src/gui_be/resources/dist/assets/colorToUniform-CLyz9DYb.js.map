{"version":3,"file":"colorToUniform-CLyz9DYb.js","sources":["../../node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TexturePool.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","../../node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","../../node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs"],"sourcesContent":["\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","import { nextPow2 } from '../../../../maths/misc/pow2.mjs';\nimport { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */ Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new TextureSource({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: true\n    });\n    return new Texture({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = nextPow2(po2Width);\n    po2Height = nextPow2(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param renderTexture - The renderTexture to free\n   */\n  returnTexture(renderTexture) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\n\nexport { TexturePool, TexturePoolClass };\n//# sourceMappingURL=TexturePool.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n"],"names":["blendModeIds","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_State","value","state","State","count","TexturePoolClass","textureOptions","pixelWidth","pixelHeight","antialias","textureSource","TextureSource","Texture","frameWidth","frameHeight","resolution","po2Width","po2Height","nextPow2","key","texture","source","renderTexture","destroyTextures","i","textures","j","TexturePool","localUniformBit","localUniformBitGroup2","localUniformBitGl","BatchableSprite","color32BitToUniform","abgr","out","offset","alpha"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}